#+TITLE: promptivd
#+AUTHOR: Miguel Guedes <miguel@softgeist.com>
#+DATE: 14/09/2025
#+OPTIONS: toc:2 num:nil ^:nil

* Overview

A high-performance Rust daemon that relays insert-text jobs from local clients to a browser extension via WebSocket, enabling seamless text injection into LLM web interfaces (ChatGPT, Claude, Gemini).

** Features
- Built with Tokio async runtime and axum web framework.
- Immediate dispatch with sink ACK propagation and graceful error handling.
- Clean modular architecture following SRP.
- Structured logging, health checks, metrics, and WebSocket heartbeat timeouts.
- Includes a sample CLI client (promptivc) and sink (promptivs) illustrating end-to-end relay and acknowledgment flow.

* Architecture
#+BEGIN_SRC
[Client] -- HTTP --> [Relay Handler] == WS ==> [Extension Sink] --> [Provider Adapter] --> Sink action
#+END_SRC

* API Endpoints

** HTTP API

*** /v1/insert
Submit an insert-text job.

Accepts a JSON payload describing the text snippet, origin metadata, optional placement hints, and an optional target specification. Validates input and relays to an active sink. Returns the sinkâ€™s ACK on success, or an error if validation fails or no sink is available.

**** Request Payload
Body is a JSON object matching the structures below.

=Content-Type: application/json=

#+BEGIN_SRC json
{
  "schema_version": "1.0",
  "source": {
    "client": "string (non-empty)",
    "label": "string | null",
    "path": "string | null"
  },
  "text": "string (non-empty after trim)",
  "placement": {
    "type": "top" | "bottom" | "cursor"
  } | null,
  "target": {
    "provider": "string | null",
    "session_policy": "reuse_or_create" | "reuse_only" | "start_fresh" | null
  } | null,
  "metadata": {
    "...": "..."
  }
}
#+END_SRC

- *placement*: optional hint for where the snippet should be inserted if the sink supports multiple insertion modes.
- *target*: optional structured directive. A non-empty *provider* string aligns with a provider ID advertised by the sink. *session_policy* guides how the sink should reuse or create sessions (`REUSE_OR_CREATE` by default, `REUSE_ONLY` to fail if reuse is impossible, `START_FRESH` to force a new session).
- *metadata*: arbitrary JSON provided by the client (e.g., timestamps, originating editor context).


*** GET /v1/providers
Return the list of provider identifiers advertised by the currently registered sink.

**** Responses
- =200 OK= with body:

#+BEGIN_SRC json
{"providers": ["chatgpt", "claude"]}
#+END_SRC

- =503 Service Unavailable=: no sink is connected. This mirrors =AppError::NoSink= and signals clients to fall back to default behaviour.
*** GET /v1/health
Lightweight liveness probe. Returns a JSON object with daemon status, current timestamp, and version string.

** WebSocket

*** GET /v1/sink/ws
WebSocket endpoint for browser extension.

Upgrades to a persistent WebSocket connection used by the sink. The server relays validated insert-text jobs to the connected sink and expects ACKs/heartbeats to maintain session health.

**** Registration handshake
Immediately after connecting, the sink must send a `register` frame:

#+BEGIN_SRC json
{
  "type": "register",
  "schema_version": "1.0",
  "version": "sink-version",
  "capabilities": ["insert"],
  "providers": ["chatgpt", "claude"]
}
#+END_SRC

- *capabilities*: feature flags; today `"insert"` indicates support for insert-text jobs. Additional capabilities may be introduced later.
- *providers*: provider identifiers that the sink understands (e.g., browser adapters). Empty list is acceptable for sinks that do not integrate with provider-specific flows.

Upon successful registration the daemon responds with a `policy` frame describing limits. Clients can surface the advertised providers to users when constructing `target` directives.

**** Insert-text jobs
Validated jobs are delivered as `insert_text` messages:

#+BEGIN_SRC json
{
  "type": "insert_text",
  "schema_version": "1.0",
  "id": "job-uuid",
  "payload": {
    "text": "snippet",
    "placement": {"type": "cursor"} | null,
    "source": {"client": "cli", "label": "CLI", "path": "/tmp/file"},
    "target": {"provider": "chatgpt", "session_policy": "start_fresh"} | null,
    "metadata": {"timestamp": "...", "extra": "..."}
  }
}
#+END_SRC

The sink must process the payload, perform the insertion, and reply with an `ack` frame (`status` = `ok`, `retry`, or `failed`).

* Sample CLI Client (promptivc)
A minimal HTTP client used to submit /insert/ text jobs to the daemon. It demonstrates how a local tool can package a snippet, attach source metadata, and dispatch it through =/v1/insert=. Serves as a reference for integrating editors, scripts, or other automation with the relay.

Run:
#+BEGIN_SRC shell
cargo run --bin promptivc -- --help
#+END_SRC

* Sample Sink Client (promptivs)
A minimal WebSocket sink used to receive jobs from the daemon. It illustrates how a browser extension or external service maintains a live connection on =/v1/sink/ws=, processes incoming /insert/ text requests, and returns ACKs. Provides a working example of sink behavior, including job handling and session lifecycle.

Run:
#+BEGIN_SRC shell
cargo run --bin promptivs -- --help
#+END_SRC

* License
Distributed under the MIT License. See LICENSE for more information.
